elif request.method == 'POST' and 'code-form-submit' in request.POST:
code = request.POST['code-form-comment']
# print("in-code-form")
if code == '':
    return render(request, 'Upload.html', {'quizTitle': quiz.quizTitle,
                                           'quizDetail': quiz.quizDetail,
                                           'Deadline': quiz.deadline,
                                           'Hint': quiz.hint,
                                           'code': code,
                                           'Timer': timer_stop.timestamp() * 1000,
                                           'Deadtimestamp': deadline.timestamp() * 1000,
                                           })
else:
    fileName = str(request.user.studentId) + '_coded_' + str(quiz.quizTitle) + '_' + str(
        quiz.classroom.className) + '.py'
    f = open('./media/' + fileName, 'w')
    for debug_line in code:
        f.write(debug_line)
    f.close()
    Upload.objects.get_or_create(title=fileName, fileUpload=fileName, user=request.user, quiz=quiz,
                                 classroom=quiz.classroom)
    write_mode = False
    test_case_count = 0
    Out_count = 0
    score_total = 0
    max_score = 0
    # open file .txt. Address  file ???????? Now! change follow your PC
    f = open('./media/' + fileName, 'r')
    code = f.read()
    f.close()
    try:
        byte_code = compile_restricted(code, filename='./media/' + fileName, mode='exec')
        # print(byte_code)
        # print(safe_builtins)
        exec(byte_code, safe_builtins, None)
    except Exception as E:
        raise RuntimeError(E)
    if fileName[:-3] in sys.modules:
        del sys.modules[fileName[:-3]]
        # importlib.invalidate_caches()
        prob = importlib.import_module(fileName[:-3])
        # importlib.reload(prob)
    else:
        prob = importlib.import_module(fileName[:-3])
        # importlib.reload(prob)
        # print(prob)
    f = open('./media/' + fileName, 'a')
    case = quiz.text_testcase_content
    f.write("\n\n")
    for case_line in case.splitlines():
        if (case_line[:11] == "# Test case"):
            test_case_count += 1
            Out_count += 1
        f.write(case_line + "\n")
    f.close()
    for i in range(test_case_count):
        i += 1
        globals()['test_case_out_%s' % i] = ""
        globals()['out_%s' % i] = ""
    f = open('./media/' + fileName, 'r')
    code_a = f.read()
    f.close()
    for line in code_a.splitlines():
        if "# Stop" in line:
            # print("stop")
            write_mode = False

        if write_mode:
            if "# Out" in line:
                # print("Out")
                globals()['out_%s' % test_case_num] = eval(line[6:], {'__builtins__': safe_builtins}, {})
            elif "# Score" in line:
                # print("SOCREEEE")
                globals()['score_%s' % test_case_num] = float(eval(line[8:], {'__builtins__': safe_builtins}, {}))
            elif "# Break" in line:
                # print("Break!")
                write_mode = False
            if "prob." in line:
                command = line
                # print("command this line")
                # print(command)
                '''try:
                    exec_command = inspect.getsource(eval(command[:-4]))
                    byte_code = compile_restricted(exec_command, '<inline>', 'exec')
                    print(byte_code)
                    exec(byte_code, {'__builtins__': utility_builtins}, {})
                except Exception as E:
                    print(E)
                    continue'''

            try:
                globals()['test_case_out_%s' % test_case_num] = eval(command)



            except Exception as E:
                print(E)
                continue

        if "# Test case" in line:
            # print("in testcase  ")
            test_case_num = str(line[11])
            write_mode = True

    global case_1_result
    case_1_result = ""
    global case_2_result
    case_2_result = ""
    global case_3_result
    case_3_result = ""
    global case_4_result
    case_4_result = ""
    global case_5_result
    case_5_result = ""
    for i in range(test_case_count):
        i += 1
        max_score += + globals()['score_%s' % i]

    # unittest process.
    class MyTestCase(unittest.TestCase):
        if (test_case_count > 0):
            def test_text(self):
                global case_1_result
                self.text_1 = test_case_out_1
                self.mt_1 = out_1
                if self.text_1 == self.mt_1:
                    case_1_result = "PASS"
                else:
                    case_1_result = "FAIL"
                    globals()['score_1'] = 0
                self.assertEquals(self.text_1, self.mt_1)

        if (test_case_count > 1):
            def test_text_two(self):
                global case_2_result
                self.text_2 = test_case_out_2
                self.mt_2 = out_2
                if self.text_2 == self.mt_2:
                    case_2_result = "PASS"
                else:
                    case_2_result = "FAIL"
                    globals()['score_2'] = 0
                self.assertEqual(self.text_2, self.mt_2)

        if (test_case_count > 2):
            def test_text_three(self):
                global case_3_result
                self.text_3 = test_case_out_3
                self.mt_3 = out_3
                if self.text_3 == self.mt_3:
                    case_3_result = "PASS"
                else:
                    case_3_result = "FAIL"
                    globals()['score_3'] = 0
                self.assertEqual(self.text_3, self.mt_3)

        if (test_case_count > 3):
            def test_text_three(self):
                global case_4_result
                self.text_4 = test_case_out_4
                self.mt_4 = out_4
                if self.text_4 == self.mt_4:
                    case_4_result = "PASS"
                else:
                    case_4_result = "FAIL"
                    globals()['score_4'] = 0
                self.assertEqual(self.text_4, self.mt_4)

        if (test_case_count > 4):
            def test_text_three(self):
                global case_5_result
                self.text_5 = test_case_out_5
                self.mt_5 = out_5
                if self.text_5 == self.mt_5:
                    case_5_result = "PASS"
                else:
                    case_5_result = "FAIL"
                    globals()['score_5'] = 0
                self.assertEqual(self.text_5, self.mt_5)


    test_suite = unittest.TestLoader().loadTestsFromTestCase(MyTestCase)
    test_result = TextTestRunner().run(test_suite)
    x = len(test_result.failures)
    if quiz.mode == "Pass or Fail" and x == 0:
        result = "PASS"
        result_model = 10
        max_score = 10
    elif quiz.mode == "Pass or Fail" and x != 0:
        result = "FAIL"
        result_model = 0
        max_score = 10
    elif quiz.mode == "Scoring":
        for i in range(test_case_count):
            i += 1
            score_total = score_total + globals()['score_%s' % i]
        result = "PASS"
        result_model = 0
    else:
        result = "FAIL"
        result_model = 0
    # print(score_total)
    result_set = {'pass_or_fail': {'case1': case_1_result, 'case2': case_2_result, 'case3': case_3_result,
                                   'case4': case_4_result, 'case5': case_5_result, 'result': result, },
                  'scoring': {'total_score': score_total, 'max_score': max_score}
                  }

    if QuizStatus.objects.get(quizId=quiz, studentId=User.objects.get(studentId=request.user.studentId),
                              classroom=quiz.classroom).status == False:
        QuizTracker.objects.update_or_create(
            studentId=User.objects.get(studentId=request.user.studentId),
            classroom=quiz.classroom,
        )
        quizDoneCount = QuizTracker.objects.get(studentId=User.objects.get(studentId=request.user.studentId),
                                                classroom=quiz.classroom, )
        quizDoneCount.quizDoneCount += 1
        quizDoneCount.save()
        quizStatus = QuizStatus.objects.get(quizId=quiz,
                                            studentId=User.objects.get(studentId=request.user.studentId),
                                            classroom=quiz.classroom,
                                            )
        quizStatus.status = True
        quizStatus.save()
    # print(str(test_case_count) + ' ' + str(Out_count))
    for i in range(test_case_count):
        i += 1
        globals()['test_case_out_%s' % i] = ""
        globals()['out_%s' % i] = ""
        globals()['score_%s' % i] = 0
    test_case_count = 0
    Out_count = 0
    f = open('./media/' + fileName, 'r')
    temp_f = f.readlines()
    f.close()
    f = open('./media/' + fileName, 'w')
    for m in temp_f:
        if "# Test case" in m:
            break
        else:
            f.write(m)
    f.close()
    f = open('./media/' + fileName, 'r')
    try:
        quiz_score = QuizScore.objects.get(quizId=quiz, studentId=User.objects.get(studentId=request.user.studentId),
                                           classroom=quiz.classroom)
        quiz_score.total_score = score_total
        quiz_score.passOrFail = result_model
        quiz_score.max_score = max_score
        quiz_score.code = f.read()
        quiz_score.save()
    except ObjectDoesNotExist:
        QuizScore.objects.create(quizId=quiz,
                                 studentId=User.objects.get(studentId=request.user.studentId),
                                 classroom=quiz.classroom,
                                 total_score=score_total,
                                 passOrFail=result_model,
                                 max_score=max_score,
                                 code=f.read(),
                                 )
    f.close()
try:
    return render(request, 'Upload.html', {'quizTitle': quiz.quizTitle,
                                           'quizDetail': quiz.quizDetail,
                                           'Deadline': quiz.deadline,
                                           'Hint': quiz.hint,
                                           'display': result_set,
                                           'Case_Count': test_result.testsRun,
                                           'mode': quiz.mode,
                                           'code': code,
                                           'Timer': timer_stop.timestamp() * 1000,
                                           'Deadtimestamp': deadline.timestamp() * 1000, })
except Exception as e:
    return render(request, 'Upload.html', {'quizTitle': quiz.quizTitle,
                                           'quizDetail': quiz.quizDetail,
                                           'Deadline': quiz.deadline,
                                           'Hint': quiz.hint,
                                           'display': result_set,
                                           'Case_Count': test_result.testsRun,
                                           'mode': quiz.mode,
                                           'code': code,
                                           'Timer': False,
                                           'Deadtimestamp': deadline.timestamp() * 1000, })